import numpy as np
import math

# Taken from evaluating ACE data files included in MCNP6.2
# Evaluated at T = 293.606 kelvin

# atomic weight ratios
u235_awr = 233.02480
u238_awr = 236.00580

pu239_awr = 236.99860
pu240_awr = 237.99160


u235_xs_2_0 = {
    "total": 7.14769,
    "elastic": 3.45240,
    "inelastic": 2.34924,
    "n2n": 0.00000,
    "n3n": 0.00000,
    "fission": 1.28672,
}

u238_xs_2_0 = {
    "total": 7.28272,
    "elastic": 3.52843,
    "inelastic": 3.17236,
    "n2n": 0.00000,
    "n3n": 0.00000,
    "fission": 0.53403,
}

u235_xs_14_1 = {
    "total": 5.83708,
    "elastic": 2.69147,
    "inelastic": 0.51093,
    "n2n": 0.51159,
    "n3n": 0.03800,
    "fission": 2.08393,
}

u238_xs_14_1 = {
    "total": 5.86643,
    "elastic": 2.80597,
    "inelastic": 0.63319,
    "n2n": 0.84861,
    "n3n": 0.42622,
    "fission": 1.15158,
}


pu239_xs_2_0 = {
    "total": 7.22590,
    "elastic": 3.38971,
    "inelastic": 1.85282,
    "n2n": 0.00000,
    "n3n": 0.00000,
    "fission": 1.97537,
}

pu240_xs_2_0 = {
    "total": 7.24710,
    "elastic": 3.44116,
    "inelastic": 2.04856,
    "n2n": 0.00000,
    "n3n": 0.00000,
    "fission": 1.69940,
}

pu239_xs_14_1 = {
    "total": 5.87774,
    "elastic": 2.72848,
    "inelastic": 0.49395,
    "n2n": 0.22477,
    "n3n": 0.01609,
    "fission": 2.41217,
}

pu_240_xs_14_1 = {
    "total": 5.90195,
    "elastic": 2.51725,
    "inelastic": 0.50697,
    "n2n": 0.54913,
    "n3n": 0.02961,
    "fission": 2.29802,
}

# Following data is from the FREYA 2.0.2 user manual, which in turn derives their
# data from published sources such as Zucker and Holden
# https://nuclear.llnl.gov/simulation/fission_v2.0.2.pdf

# Induced Fission Data

u235_induced_fission_multiplicity_value = np.array(
    [
        [
            0.0317223,
            0.1717071,
            0.3361991,
            0.3039695,
            0.1269459,
            0.0266793,
            0.0026322,
            0.0001449,
        ],
        [
            0.0237898,
            0.1555525,
            0.3216515,
            0.3150433,
            0.1444732,
            0.0356013,
            0.0034339,
            0.0004546,
        ],
        [
            0.0183989,
            0.1384891,
            0.3062123,
            0.3217566,
            0.1628673,
            0.0455972,
            0.0055694,
            0.0011093,
        ],
        [
            0.0141460,
            0.1194839,
            0.2883075,
            0.3266568,
            0.1836014,
            0.0569113,
            0.0089426,
            0.0019504,
        ],
        [
            0.0115208,
            0.1032624,
            0.2716849,
            0.3283426,
            0.2021206,
            0.0674456,
            0.0128924,
            0.0027307,
        ],
        [
            0.0078498,
            0.0802010,
            0.2456595,
            0.3308175,
            0.2291646,
            0.0836912,
            0.0187016,
            0.0039148,
        ],
        [
            0.0046272,
            0.0563321,
            0.2132296,
            0.3290407,
            0.2599806,
            0.1045974,
            0.0265604,
            0.0056322,
        ],
        [
            0.0024659,
            0.0360957,
            0.1788634,
            0.3210507,
            0.2892537,
            0.1282576,
            0.0360887,
            0.0079244,
        ],
        [
            0.0012702,
            0.0216090,
            0.1472227,
            0.3083032,
            0.3123950,
            0.1522540,
            0.0462449,
            0.0107009,
        ],
        [
            0.0007288,
            0.0134879,
            0.1231200,
            0.2949390,
            0.3258251,
            0.1731879,
            0.0551737,
            0.0135376,
        ],
        [
            0.0004373,
            0.0080115,
            0.1002329,
            0.2779283,
            0.3342611,
            0.1966100,
            0.0650090,
            0.0175099,
        ],
    ]
)
u235_induced_fission_multiplicity_value /= np.sum(
    u235_induced_fission_multiplicity_value, axis=1
)[np.newaxis].T

u235_induced_fission_multiplicity_energy = np.array(
    [0.0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
)

u235_induced_fission_multiplicity_nubar = np.array(
    [
        2.4140000,
        2.5236700,
        2.6368200,
        2.7623400,
        2.8738400,
        3.0386999,
        3.2316099,
        3.4272800,
        3.6041900,
        3.7395900,
        3.8749800,
    ]
)

u235_induced_watt = {"a2": 7.32627e-05, "a1": -0.00936909, "a0": 0.920108}


u238_induced_fission_multiplicity_value = np.array(
    [
        [
            0.0396484,
            0.2529541,
            0.2939544,
            0.2644470,
            0.1111758,
            0.0312261,
            0.0059347,
            0.0005436,
            0.0001158,
        ],
        [
            0.0299076,
            0.2043215,
            0.2995886,
            0.2914889,
            0.1301480,
            0.0363119,
            0.0073638,
            0.0006947,
            0.0001751,
        ],
        [
            0.0226651,
            0.1624020,
            0.2957263,
            0.3119098,
            0.1528786,
            0.0434233,
            0.0097473,
            0.0009318,
            0.0003159,
        ],
        [
            0.0170253,
            0.1272992,
            0.2840540,
            0.3260192,
            0.1779579,
            0.0526575,
            0.0130997,
            0.0013467,
            0.0005405,
        ],
        [
            0.0124932,
            0.0984797,
            0.2661875,
            0.3344938,
            0.2040116,
            0.0640468,
            0.0173837,
            0.0020308,
            0.0008730,
        ],
        [
            0.0088167,
            0.0751744,
            0.2436570,
            0.3379711,
            0.2297901,
            0.0775971,
            0.0225619,
            0.0030689,
            0.0013626,
        ],
        [
            0.0058736,
            0.0565985,
            0.2179252,
            0.3368863,
            0.2541575,
            0.0933127,
            0.0286200,
            0.0045431,
            0.0031316,
        ],
        [
            0.0035997,
            0.0420460,
            0.1904095,
            0.3314575,
            0.2760413,
            0.1112075,
            0.0355683,
            0.0065387,
            0.0031316,
        ],
        [
            0.0019495,
            0.0309087,
            0.1625055,
            0.3217392,
            0.2943792,
            0.1313074,
            0.0434347,
            0.0091474,
            0.0046284,
        ],
        [
            0.0008767,
            0.0226587,
            0.1356058,
            0.3076919,
            0.3080816,
            0.1536446,
            0.0522549,
            0.0124682,
            0.0067176,
        ],
        [
            0.0003271,
            0.0168184,
            0.1111114,
            0.2892434,
            0.3160166,
            0.1782484,
            0.0620617,
            0.0166066,
            0.0095665,
        ],
    ]
)
u238_induced_fission_multiplicity_value /= np.sum(
    u238_induced_fission_multiplicity_value, axis=1
)[np.newaxis].T

u238_induced_fission_multiplicity_energy = np.array([0.0, 1, 2, 3, 4, 5, 6, 7, 8, 10])

u238_induced_fission_multiplicity_nubar = np.array(
    [
        2.2753781,
        2.4305631,
        2.5857481,
        2.7409331,
        2.8961181,
        3.0513031,
        3.2064881,
        3.3616731,
        3.5168581,
        3.6720432,
        3.8272281,
    ]
)

u238_induced_watt = {"a2": 8.96945e-05, "a1": -0.0106491, "a0": 0.925496}


pu239_induced_fission_multiplicity_value = np.array(
    [
        [
            0.0108826,
            0.0994916,
            0.2748898,
            0.3269196,
            0.2046061,
            0.0726834,
            0.0097282,
            0.0006301,
            0.0001685,
        ],
        [
            0.0084842,
            0.0790030,
            0.2536175,
            0.3289870,
            0.2328111,
            0.0800161,
            0.0155581,
            0.0011760,
            0.0003469,
        ],
        [
            0.0062555,
            0.0611921,
            0.2265608,
            0.3260637,
            0.2588354,
            0.0956070,
            0.0224705,
            0.0025946,
            0.0005205,
        ],
        [
            0.0045860,
            0.0477879,
            0.1983002,
            0.3184667,
            0.2792811,
            0.1158950,
            0.0301128,
            0.0048471,
            0.0007233,
        ],
        [
            0.0032908,
            0.0374390,
            0.1704196,
            0.3071862,
            0.2948565,
            0.1392594,
            0.0386738,
            0.0078701,
            0.0010046,
        ],
        [
            0.0022750,
            0.0291416,
            0.1437645,
            0.2928006,
            0.3063902,
            0.1641647,
            0.0484343,
            0.0116151,
            0.0014149,
        ],
        [
            0.0014893,
            0.0222369,
            0.1190439,
            0.2756297,
            0.3144908,
            0.1892897,
            0.0597353,
            0.0160828,
            0.0029917,
        ],
        [
            0.0009061,
            0.0163528,
            0.0968110,
            0.2558524,
            0.3194566,
            0.2134888,
            0.0729739,
            0.0213339,
            0.0020017,
        ],
        [
            0.0004647,
            0.0113283,
            0.0775201,
            0.2335926,
            0.3213289,
            0.2356614,
            0.0886183,
            0.0274895,
            0.0039531,
        ],
        [
            0.0002800,
            0.0071460,
            0.0615577,
            0.2089810,
            0.3200121,
            0.2545846,
            0.1072344,
            0.0347255,
            0.0054786,
        ],
        [
            0.0002064,
            0.0038856,
            0.0492548,
            0.1822078,
            0.3154159,
            0.2687282,
            0.1295143,
            0.0432654,
            0.0075217,
        ],
    ]
)
pu239_induced_fission_multiplicity_value /= np.sum(
    pu239_induced_fission_multiplicity_value, axis=1
)[np.newaxis].T


pu239_induced_fission_multiplicity_energy = np.array([0.0, 1, 2, 3, 4, 5, 6, 7, 8, 10])

pu239_induced_fission_multiplicity_nubar = np.array(
    [
        2.8760000,
        3.0088800,
        3.1628300,
        3.3167800,
        3.4707300,
        3.6246800,
        3.7786300,
        3.9325800,
        4.0865300,
        4.2404900,
        4.3944400,
    ]
)

pu239_induced_watt = {"a2": 8.50642e-05, "a1": -0.0101099, "a0": 0.887305}


pu240_induced_watt = {"a2": 9.10537e-05, "a1": -0.0105303, "a0": 0.889439}


# Spontaneous Fission Data

u238_spontaneous_fission_multiplicity = np.array(
    [0.0481677, 0.2485215, 0.4253044, 0.2284094, 0.0423438, 0.0072533]
)

pu240_spontaneous_fission_multiplicity = np.array(
    [0.0631852, 0.2319644, 0.3333230, 0.2528207, 0.0986461, 0.0180199, 0.0020406]
)

# nubar should be used if above distribution not present
u235_spontaneous_watt = {"a": 1.29080, "b": 4.85231, "nubar": 1.86}
u238_spontaneous_watt = {"a": 1.54245, "b": 6.81057, "nubar": 2.01}
pu239_spontaneous_watt = {"a": 1.12963, "b": 3.80269, "nubar": 2.16}
pu240_spontaneous_watt = {"a": 1.25797, "b": 4.68927, "nubar": 2.156}


def maxwell_fission_spectrum(a, E):
    ans = np.sqrt(E) * np.exp(-E / a)
    ans /= np.sum(ans)
    return ans


def watt_spontaneous_energy_pdf(a, b, E):
    C = np.sqrt(np.pi * b / (4 * a))
    C *= np.exp(b / (4 * a)) / a

    ans = C * np.exp(-a * E)
    ans *= np.sinh(np.sqrt(b * E))

    return ans


def watt_induced_energy_pdf(a2, a1, a0, E):
    a = a0 + (a1 * E) + (a2 * (E**2))
    b = 1.0
    return lambda e: watt_spontaneous_energy_pdf(a, b, e)


def terrell_distribution(max_n, nubar, sigma=1.079):
    def f(val):
        z1 = 0.5 * math.erfc(-val / math.sqrt(2))
        z2 = 0.5 * math.erfc(val / math.sqrt(2))

        return z1 - z2

    b = 0.5 - 0.5 * f((nubar + 0.5) / sigma)
    # print(b)

    terrell_cdf = [0.0]
    for n in range(0, max_n + 1):
        upper_bound = (n - nubar + 0.5 + b) / sigma
        ans = 0.5 * math.erfc(-upper_bound / math.sqrt(2))
        terrell_cdf.append(ans)

    terrell_cdf = np.array(terrell_cdf)
    terrell_pdf = terrell_cdf[1:] - terrell_cdf[:-1]

    terrell_pdf /= np.sum(terrell_pdf)

    return terrell_pdf
